package services;

import java.io.IOException;
import java.sql.*;
import java.util.*;

import com.pl.projectfiles.*;

public class MotoDBManager {

	private Connection conn;
	private Statement stmt;
	private PreparedStatement addMotorcycleStmt;
	private PreparedStatement getMotorcycleStmt;
	private PreparedStatement deleteMotorcycleStmt;

	
	public MotoDBManager() {
		
		Properties props = new Properties();
		
		try {	
			props.load(ClassLoader.getSystemResourceAsStream("com/pl/resources/jdbc.properties"));
		} catch (IOException e) {
				e.printStackTrace();
		}		
		
		
		try {
			conn = DriverManager.getConnection("jdbc:hsqldb:hsql://localhost/workdb");
			stmt = conn.createStatement();
			boolean motorcycleTableExists = false;

			ResultSet rs = conn.getMetaData().getTables(null, null, null, null);

			while(rs.next()) {
				if("Motorcycle".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					motorcycleTableExists = true;
					break;
				}
			}


			if(!motorcycleTableExists) {
				stmt.executeUpdate("" +
						"CREATE TABLE motorcycle(" +
						"id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY," +
						"brand varchar(36)," +
						"model varchar(36)," +
						"price int," +
						"yearOfManufacture varchar(4)" +
						")");
			}

			addMotorcycleStmt = conn.prepareStatement("" +
					"INSERT INTO motorcycle (brand, model, price, yearOfManufacture) VALUES (?, ?, ?)" +
					"");

			getMotorcycleStmt = conn.prepareStatement("" +
					"SELECT * FROM motorcycle" +
					"");



		} catch (SQLException e) {

			e.printStackTrace();
		}
	}

	public void addMotorcycle(Motorcycle motorcycle) {
		try {
			addMotorcycleStmt.setString(1, motorcycle.getBrand());
			addMotorcycleStmt.setString(2, motorcycle.getModel());
			addMotorcycleStmt.setInt(3, motorcycle.getPrice());
			addMotorcycleStmt.setString(4, motorcycle.getYearOfManufacture().toString());
			addMotorcycleStmt.executeUpdate();

		} catch (SQLException e) {

			e.printStackTrace();
		}

	}

	public List<Motorcycle> getAllMotorcycle() {
		List<Motorcycle> motorcycle = new ArrayList<Motorcycle>();

		try {
			ResultSet rs = getMotorcycleStmt.executeQuery();

			while(rs.next()) {
				
				if(rs.getString("platforms").equalsIgnoreCase("pc"))
					games.add(new Game(rs.getString("title"), rs.getInt("price"),Platforms.PC));
				else if(rs.getString("platforms").equalsIgnoreCase("xbox360"))
					games.add(new Game(rs.getString("title"), rs.getInt("price"),Platforms.XBOX360));
				else if(rs.getString("platforms").equalsIgnoreCase("ps3"))
					games.add(new Game(rs.getString("title"), rs.getInt("price"),Platforms.PS3));
				
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}

		return motorcycle;
	}
	
	public void deleteAllMotorcycle() {
		try {
			deleteMotocycleStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}




}